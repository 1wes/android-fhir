name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events for the `master` branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
   # Build will compile APK, test APK and run tests, lint, etc.
   build:

    runs-on: ubuntu-latest
   
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Make files executable
      run: chmod +x ./gradlew && chmod +x ./fhirengine/checksum.sh

    - name: Generate cache key
      run: ./fhirengine/checksum.sh checksum.txt

    - name: Copy CI gradle.properties
      run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches/modules-2
        key: ${{ runner.os }}-gradlemodules-${{ hashFiles('checksum.txt') }}
        restore-keys: |
          ${{ runner.os }}-gradlemodules-
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches/jars-3
        key: ${{ runner.os }}-gradlejars-${{ hashFiles('checksum.txt') }}
        restore-keys: |
          ${{ runner.os }}-gradlejars-
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches/build-cache-1
        key: ${{ runner.os }}-gradlebuildcache-${{ hashFiles('checksum.txt') }}
        restore-keys: |
          ${{ runner.os }}-gradlebuildcache-

#    - name: Ktlint
#      run: ./gradlew ktlint --stacktrace

    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Upload build reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-reports
        path: app/build/reports  
   
    - name: Copy test results
      if: always()
      run: |
        mkdir -p junit
        find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} junit/ \;
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: junit-results
        path: junit
